name: Extreamer-Incoming

on:
  push:
    paths:
    - 'incoming/**'
    branches: [ master ]
  pull_request:
    paths:
      - 'incoming/**'
    branches: [ master ]


env:
  PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DEPLOYMENT_NAME: extreamer-incoming
  IMAGE: extreamer-incoming

jobs:
  buildPushDeployExstreamerIncoming:
    name: Build Push Deploy Exstreamer Incoming - Kubernetes
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: incoming

    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        id: Build
        uses: actions/setup-node@v1.4.3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      # - run: npm run build --if-present
      # - name: Test
      #   id: Test
      #   run: npm test

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GCLOUD_CREDENTIALS }}
          project_id: ${{ secrets.GCLOUD_PROJECT_ID }}

      # Include credentials
      - name: Create Key File
        id: Create-Key-File
        run: |
          mkdir service-accounts
          echo ${{ secrets.DEFAULT_SERVICE_ACCOUNT_CREDENTIALS }} | base64 -d > service-accounts/stoked-reality.json

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      # Get the GKE credentials so we can deploy to the cluster
      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
      # Build the Docker image
      - name: Build
        id: Docker-Build
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
            --build-arg GCLOUD_AUTH=${{ secrets.DEFAULT_SERVICE_ACCOUNT_CREDENTIALS }} \
            .
      # Push the Docker image to Google Container Registry
      - name: Docker Push
        id: Docker-Push
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
      # Set up kustomize
      - name: Configure Kustomize
        id: Configure-Kustomize
        run: |-
          cd infrastructure
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        id: Deploy
        run: |-
          cd infrastructure
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide

      - uses: act10ns/slack@v1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: always()
